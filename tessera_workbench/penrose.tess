let half_thin_rhombus = tile {
    isosceles_triangle( pi/5 )
} with {
    color is "palegoldenrod";
    base, b, a is this.edges;
    base.broken is true;
};

let half_fat_rhombus = tile {
    isosceles_triangle( 3*pi/5 )
} with {
    color is "skyblue";
    base, b, a is this.edges;
    base.broken is true;
};

let inflate_thin_rhombus = patch( n ) {
    lay top, bottom such_that top.a <-> bottom.b
} where {
    let top, bottom = 
        if (n == 1)
            [flip( half_fat_rhombus ), half_thin_rhombus]
        else
            [flip( inflate_fat_rhombus(n-1) ), inflate_thin_rhombus(n-1) ];
} with {
    a on top.base;
    b on top.b;
    base on bottom.a;
};

let inflate_fat_rhombus = patch( n ) {
    lay left, middle, right such_that  middle.b  <-> left.a, middle.a <-> right.b
} where {
    let left, middle, right = 
        if (n == 1)
            [ flip(half_fat_rhombus) , half_thin_rhombus, half_fat_rhombus]
        else
            [ flip(inflate_fat_rhombus(n-1) ), inflate_thin_rhombus(n-1), inflate_fat_rhombus(n-1) ];
} with {
    a on left.b;
    b on right.base;
    base on left.base;
};

let decagon = patch( n ) {
    lay ary[0], ary[1], ary[2], ary[3], ary[4], ary[5], ary[6], ary[7], ary[8], ary[9] such_that
        $1.a <-> $2.a, 
        $2.b <-> $3.b, 
        $3.a <-> $4.a, 
        $4.b <-> $5.b, 
        $5.a <-> $6.a, 
        $6.b <-> $7.b, 
        $7.a <-> $8.a, 
        $8.b <-> $9.b, 
        $9.a <-> $10.a
} where {
    let ary = [
        inflate_thin_rhombus(n),
        flip(inflate_thin_rhombus(n)),
        inflate_thin_rhombus(n),
        flip(inflate_thin_rhombus(n)),
        inflate_thin_rhombus(n),
        flip(inflate_thin_rhombus(n)),
        inflate_thin_rhombus(n),
        flip(inflate_thin_rhombus(n)),
        inflate_thin_rhombus(n),
        flip(inflate_thin_rhombus(n))
    ];
};

tableau (n) {
    lay decagon(n)
}