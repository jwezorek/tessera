let ace = func(n) {
    lay rhomb(n), triangle(n), flip( triangle(n) ) such_that 
        $1.bottom_left <-> $2.from, $1.bottom_right <-> $3.from 
    with {
        left on $2.to;
        right on $3.to;
        top_left on $1.top_left;
        top_right on $1.top_right;
    } 
};

let triangle = func(n) {
    if (n == 1)
        {isosceles_triangle( pi/2)} with {
            color is "yellow";
            base, to, from on this.edges;
            base.broken is true;
        }
    else
        lay triangle(n-1), rhomb(n-1), ace(n-1) such_that  
            $1.from <-> $2.bottom_left,  $2.top_right <-> $3.left 
        with {
            from on $2.top_left;
            to on $3.top_left;
        }
};

let rhomb = func(n) {
    if (n == 1)
       { rhombus( pi /4 ) } with {
            color is "red";
            bottom_right, top_right, top_left, bottom_left is this.edges;
        }
    else
        lay ace(n-1), rhomb(n-1), ace(n-1) such_that 
            $1.left <-> $2.bottom_left, $3.left <-> $2.top_right 
        with {
            top_left on $1.top_left;
            top_right on $1.top_right;
            bottom_left on $3.top_right;
            bottom_right on $3.top_left;
        }
};

let star = func(n) {
    lay quadrant(n), quadrant(n), quadrant(n), quadrant(n) such_that 
        $1.a <-> $2.b, $2.a <-> $3.b, $3.a <-> $4.b
} where {
    let quadrant = func(n) {
        lay ace(n), flip(ace(n)) such_that 
            $1.top_right <-> $2.top_right 
        with {
            a on $1.top_left;
            b on $2.top_left;
        }
    };
};

tableau(n) {
    lay star(n)
}