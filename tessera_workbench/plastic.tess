

let rho = ((9 + sqrt(69))/18)^(1/3) + ((9 - sqrt(69))/18)^(1/3);

let iso = func(n) {
    if (n==1)
        {triangle_by_sides( 1/sqrt(rho), rho, rho)} with {
            base, right, left is this.edges;
            color is "blue";
        }
    else
        lay iso(n-1), flip(s1(n-1)) such_that $1.left <-> $2.long with {
            base on $1.right;
            left on $2.short;
            right on $2.base;
        }
};

let s1 = func(n) {
    if (n==1)
        {triangle_by_sides( rho * rho, sqrt(rho), 1)} with {
            base, long, short is this.edges;
            color is "yellow";
        }
    else
        lay flip(s2(n-1)), iso(n-1), flip(s1(n-1)) such_that $1.long <-> $2.left, $2.right <-> $3.short with {
            long on $3.base;
            short on $1.base;
            base on $2.base;
        }
};

let s2 = func(n) {
    if (n==1)
        {triangle_by_sides( rho * rho, sqrt(rho), 1)} with {
            base, long, short is this.edges;
            color is "yellow";
        }
    else
        lay 
            flip(s3(n-1)), flip(s2(n-1)), s3(n-1), s3(n-1)
        such_that 
            $3.short <-> $1.long, $1.base <-> $2.base, $1.short <-> $4.long 
        with {
            long on $3.long;
            base on $3.base;
            short on $2.long;
        }
    };

// hello there

let s3 = func(n) {
    if (n==1) 
        {triangle_by_sides( rho * rho, sqrt(rho), 1)} with {
            base, long, short is this.edges;
            color is "green";
        }
    else
        lay 
            s2(n-1), flip(iso(n-1)), flip(iso(n-1)), s4(n-1) 
        such_that 
            $1.long <-> $2.left, $2.right <-> $3.right, $3.base <-> $4.short 
        with {
            short on $1.short;
            long on $3.left;
            base on $1.base;
        }
};

/* this is
   a comment
*/

let s4 = func(n) {
    {triangle_by_sides( rho * rho, sqrt(rho), 1)} with {
            base, long, short is this.edges;
            color is "purple";
        }
};

tableau(n) {
    lay s2(3)
}